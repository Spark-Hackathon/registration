<title>{{title}}</title>
<link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet">
<link rel="shortcut icon" href="/images/spark.svg" type="image/x-icon">

<link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,400;0,500;0,600;0,800;1,400;1,500;1,600;1,800&display=swap" rel="stylesheet">

<style>
    * {
        font-family: "Montserrat", serif;
    }

    h1 {
        font-weight: 700 !important;
    }
</style>

<body class="bg-gray-200 container mx-auto py-20">
    <header class="mb-20">
        <h1 class="text-4xl md:text-6xl">Admin for <span class="px-2 bg-yellow-200 leading-tight md:px-6">Summer Spark {{year}}</span>.</h1>
        <p class="mt-4 text-xl leading-normal text-gray-500 md:text-3xl md:leading-relaxed">Admin experience is a little clunky but it's the best we can do in the limited amount of time.</p>
    </header>

    <div id="admin">
        <div class="bg-white rounded-lg shadow-md px-8 py-4">
            <form id="select-applicants">
                <input type="hidden" name="code" class="password">

                <div class="grid grid-cols-2 items-center">
                    <label for="applicants-or-registered"><span class="text-red-500 inline-block">*</span> Select applicants or registered campers?</label>
                    
                    <div class="block mt-2">
                        <select name="applicants-or-registered" id="applicants-or-registered" class="cursor-pointer border-2 px-4 py-2 rounded-lg outline-none">
                            <option value="0">Select all applicants</option>
                            <option value="1">Select all registered</option>
                        </select>

                        <input type="submit" value="Query" class="ml-2 px-4 py-2 rounded-full bg-green-300 cursor-pointer font-semibold outline-none">
                    </div>
                </div>
            </form>

            <table class="table-fixed min-w-full divide-gray-200 divide-y">
                <thead>
                    <tr class="divide-x divide-gray-200">
                        <th class="py-2 divide-x divide-gray-200">Status</th>
                        <th class="py-2 divide-x divide-gray-200">Camper ID</th>
                        <th class="py-2 divide-x divide-gray-200">First Name</th>
                        <th class="py-2 divide-x divide-gray-200">Last Name</th>
                        <th class="py-2 divide-x divide-gray-200">Week Attending</th>
                        <th class="py-2 divide-x divide-gray-200">Type</th>
                        <th class="py-2 divide-x divide-gray-200">Hopes & Dreams</th>
                        <th class="py-2 divide-x divide-gray-200">Participated Before?</th>
                        <th class="py-2 divide-x divide-gray-200">Accept or Delete?</th>
                    </tr>
                </thead>
                <tbody id="applicant-data" class="divide-y divide-gray-200"></tbody>
            </table>
        </div>

        <div class="mt-10 bg-white rounded-lg shadow-md px-8 py-4">
            <form id="select-all-weeks">
                <input type="hidden" name="code" class="password">

                <div class="grid grid-cols-2 items-center">
                    <label><span class="text-red-500 inline-block">*</span> Get all weeks</label>

                    <div class="block">
                        <input type="submit" id="get-all-weeks" value="Query" class="inline-block px-4 py-2 rounded-full bg-green-300 cursor-pointer font-semibold outline-none">
                        <p class="inline-block text-gray-500 text-sm italic ml-2">or</p>
                        <button id="new-week" class="ml-2 inline-block px-4 py-2 rounded-full bg-blue-300 cursor-pointer font-semibold outline-none">New Week</button>
                    </div>
                </div>
            </form>

            <table class="table-fixed min-w-full divide-gray-200 divide-y">
                <tr>
                    <th class="py-2 divide-x divide-gray-200">Week ID</th>
                    <th class="py-2 divide-x divide-gray-200">Week Name</th>
                    <th class="py-2 divide-x divide-gray-200">Virtual Available?</th>
                    <th class="py-2 divide-x divide-gray-200">In-person Available?</th>
                    <th class="py-2 divide-x divide-gray-200">Action</th>
                </tr>
                <tbody id="week-data" class="divide-y divide-gray-200"></tbody>
            </table>
        </div>

        <div class="mt-10 bg-white rounded-lg shadow-md px-8 py-4" id="export">
            <form id="export-by-week">
                <input type="hidden" name="code" class="password" />

                <label><span class="text-red-500 inline-block">*</span> Select by week for export as CSV</label>
                <select name="week_names" id="export_week_name" required class="block ml-4 text-gray-500"></select>
                <input type="submit" value="Query" class="inline-block px-4 py-2 rounded-full bg-green-300 cursor-pointer font-semibold outline-none">
            </form>

            <br>

            <form id="export-all">
                <input type="hidden" name="code" class="password" />

                <label><span class="text-red-500 inline-block">*</span> Download everything</label>
                <input type="submit" value="Query" class="inline-block px-4 py-2 rounded-full bg-green-300 cursor-pointer font-semibold outline-none">
            </form>
        </div>

        <div class="mt-10 bg-white rounded-lg shadow-md px-8 py-4">
            <p class="italic text-gray-500">Note: first you have to get all weeks before attempting to create new question.</p>
            <form id="send-mail" class="mt-4">
                <input type="hidden" name="code" class="password">

                <label for="week_names" class="block"><span class="text-red-500 inline-block">*</span> Select week(s) â€“ hold down control (or command on mac) and click for multiple weeks</label>
                <select name="week_names" id="week_names" required multiple class="block ml-4 text-gray-500"></select>

                <label for="prospects" class="block"><span class="mt-2 text-red-500 inline-block">*</span> Send to prospects?</label>
                <select name="prospects" id="prospects" required class="mt-1 block cursor-pointer border-2 px-4 py-2 rounded-lg outline-none">
                    <option value="0">No</option>
                    <option value="1">Yes</option>
                </select>

                <label for="applicants" class="block"><span class="mt-2 text-red-500 inline-block">*</span> Send to applicants?</label>
                <select name="applicants" id="applicants" required class="mt-1 block cursor-pointer border-2 px-4 py-2 rounded-lg outline-none">
                    <option value="0">No</option>
                    <option value="1">Yes</option>
                </select>

                <label for="registered" class="block"><span class="mt-2 text-red-500 inline-block">*</span> Send to registered?</label>
                <select name="registered" id="registered" required class="mt-1 block cursor-pointer border-2 px-4 py-2 rounded-lg outline-none">
                    <option value="0">No</option>
                    <option value="1">Yes</option>
                </select>

                <label for="subject" class="block"><span class="mt-2 text-red-500 inline-block">*</span> Subject line</label>
                <input type="text" name="subject" id="subject" placeholder="ex. Welcome to camp!" required class="block px-4 py-2 rounded-lg border-2 outline-none w-full">

                <label for="message" class="block"><span class="mt-2 text-red-500 inline-block">*</span> Message</label>
                <textarea name="message" id="message" rows="10" class="w-full block px-4 py-2 rounded-lg border-2 outline-none" required></textarea>

                <input type="submit" value="Query" class="mt-4 block px-4 py-2 rounded-full bg-green-300 cursor-pointer font-semibold outline-none">
            </form>
        </div>

        <div class="mt-10 bg-white rounded-lg shadow-md px-8 py-4">
            <form id="select-questions">
                <input type="hidden" name="code" class="password">

                <div class="grid grid-cols-2 items-center">
                    <label><span class="text-red-500 inline-block">*</span> Get questions</label>

                    <div>
                        <input type="submit" value="Query" class="inline-block px-4 py-2 rounded-full bg-green-300 cursor-pointer font-semibold outline-none">
                    </div>
                </div>
            </form>

            <table class="table-fixed min-w-full divide-gray-200 divide-y">
                <tr>
                    <th class="py-2 divide-x divide-gray-200">Question ID</th>
                    <th class="py-2 divide-x divide-gray-200">Week</th>
                    <th class="py-2 divide-x divide-gray-200">Question</th>
                    <th class="py-2 divide-x divide-gray-200">Responses</th>
                    <th class="py-2 divide-x divide-gray-200">Action</th>
                </tr>
                <tbody id="question-data" class="divide-y divide-gray-200"></tbody>
            </table>
        </div>

        <div class="mt-10 bg-white rounded-lg shadow-md px-8 py-4">
            <p class="italic text-gray-500">Note: first you have to get all weeks before attempting to create new question.</p>
            <form id="new-question" class="mt-4">
                <input type="hidden" name="code" class="password">

                <div>
                    <label for="week" class="block"><span class="text-red-500 inline-block">*</span> Select week</label>
                    <select name="week" id="week_title" required class="mt-1 block cursor-pointer border-2 px-4 py-2 rounded-lg outline-none"></select>
                    <label for="question" class="block"><span class="mt-4 text-red-500 inline-block">*</span> Question</label>
                    <input type="text" name="question" id="question" placeholder="ex. Why do you think you'd be a good candidate?" required class="mt-1 block px-4 py-2 rounded-lg border-2 outline-none w-64">
                    <input type="submit" value="Query" class="mt-4 px-4 py-2 rounded-full bg-green-300 cursor-pointer font-semibold outline-none">
                </div>
            </form>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script>
        const reload = () => location.reload();
        let password = prompt("Enter admin password");

        if(password == null || password == undefined || password == "") {
            document.getElementById("admin").style.display = "none";
        } else {
            let password_fields = document.getElementsByClassName("password");

            for(let fields of password_fields) {
                fields.value = password;
            }
        }

        const accept_camper = (week_name, camper_id) => {
            fetch("/admin/accept-camper-application", { 
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password,
                    week_name,
                    camper_id
                })
            })
                .then(() => {
                    alert("Successfully accepted camper.");
                    reload();
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        }

        const confirm_camper = (week_name, camper_id) => {
            fetch("/admin/confirm-camper", { 
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password,
                    week_name,
                    camper_id
                })
            })
                .then(() => {
                    alert("Successfully confirmed camper.");
                    reload();
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        }

        const delete_camper = (week_name, camper_id) => {
            fetch("/admin/delete-enrollment", {
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password,
                    week_name,
                    camper_id
                })
            })
                .then(() => {
                    alert("Successfully deleted camper.");
                    reload();
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        }

        const delete_week = (id) => {
            fetch("/admin/delete-week", {
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password,
                    code2: "eatmyshorts",
                    id
                })
            })
                .then(() => {
                    alert("Successfully deleted week.");
                    reload();
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        }

        const delete_question = (question_id, week_name) => {
            fetch("/admin/delete-question", {
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password,
                    week: week_name,
                    id: question_id
                })
            })
                .then(() => {
                    alert("Successfully deleted question.");
                    reload();
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        }

        const delete_response = (question_id, camper_id) => {
            fetch("/admin/delete-response", {
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password,
                    question_id,
                    camper_id
                })
            })
                .then(() => {
                    alert("Successfully deleted response.");
                    reload();
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        }

        const new_week = () => {
            let week_name = prompt("Week Name?");

            if(week_name != "") {
                let start_date = prompt("Start date? (YYYY-MM-DD)");
                let end_date = prompt("End date? (YYYY-MM-DD)");
                let cb_code = prompt("CB Code?");
                let inclass_available = prompt("In-class option available? y/n") == "y" ? 1 : 0;
                let virtual_available = prompt("Virtual option available? y/n") == "y" ? 1 : 0;

                fetch("/admin/add-week", {
                    method: "POST",
                    cache: "no-cache",
                    headers: { "Content-Type": "application/json" },
                    redirect: "manual",
                    body: JSON.stringify({
                        code: password,
                        week_name,
                        start_date,
                        end_date,
                        cb_code,
                        inclass_available,
                        virtual_available
                    })
                })
                    .then(() => {
                        alert("Successfully created week.");
                        reload();
                    })
                    .catch(err => {
                        alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                        console.error(err);
                    });
            }
        }

        $("#new-week").click(new_week)

        $("#select-applicants").on("submit", async event => {
            event.preventDefault();
            $("#applicant-data").empty();

            let form_data = {
                code: password,
                "applicants-or-registered": $("#applicants-or-registered").val()
            }

            fetch("/admin/pull-current-campers", { 
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify(form_data)
            })
                .then(response => response.json())
                .then(data => {
                    let campers = data.campers;

                    let type_translation = {
                        "0": "Designer",
                        "1": "Artist",
                        "2": "Researcher",
                        "3": "Writer",
                        "4": "Leader",
                        "5": "None",
                    }
                    
                    for(let camper of campers) {
                        let camper_row = $(`<tr class="text-center divide-x divide-gray-200"></tr>`);

                        let confirmed;

                        if(camper.confirmed == undefined || camper.confirmed == null || camper.confirmed == "") {
                            confirmed = $(`<td class="text-gray-500 py-4 px-2">&empty;</td>`);
                        } else {
                            confirmed = $(`<td class="text-gray-500 py-4 px-2">${(camper.confirmed == 0) ? "&cross;" : "&check;"}</td>`);
                        }

                        let id = $(`<td class="text-gray-500 py-4 px-2">${camper.camper_id}</td>`);
                        let first_name = $(`<td class="text-gray-500 py-4 px-2">${camper.first_name}</td>`);
                        let last_name = $(`<td class="text-gray-500 py-4 px-2">${camper.last_name}</td>`);
                        let week = $(`<td class="text-gray-500 py-4 px-2">${camper.week}</td>`);
                        let type = $(`<td class="text-gray-500 py-4 px-2">${type_translation[camper.type]}</td>`);
                        let hopes_dreams = $(`<td class="text-gray-500 py-4 px-2">${camper.hopes_dreams}</td>`);
                        let participated = $(`<td class="text-gray-500 py-4 px-2">${(camper.participated) == "Participated before" ? "Yes" : "No"}</td>`);
                        let accept_decline = `<td class="py-6 text-center mx-auto">
                            <button class="outline-none text-green-400 cursor-pointer hover:text-green-600 transition duration-200" onclick="accept_camper('${camper.week}', ${camper.camper_id})">Accept Camper</button><br/>
                            <button class="outline-none mt-2 text-blue-400 cursor-pointer hover:text-blue-600 transition duration-200" onclick="confirm_camper('${camper.week}', ${camper.camper_id})">Confirm Camper</button><br/>
                            <button class="outline-none mt-2 text-red-400 cursor-pointer hover:text-red-600 transition duration-200" onclick="delete_camper('${camper.week}', ${camper.camper_id})">Delete Camper</button>
                            </td>`;

                        camper_row.append([
                            confirmed,
                            id,
                            first_name,
                            last_name,
                            week,
                            type,
                            hopes_dreams,
                            participated,
                            accept_decline
                        ]);

                        $("#applicant-data").append(camper_row);
                    }
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        });

        $("#select-all-weeks").on("submit", event => {
            event.preventDefault();
            $("#week-data").empty();

            fetch("/admin/get-weeks", {
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: passwordÃ¥
                })
            })
                .then(response => response.json())
                .then(weeks => {
                    $("select#week_title").empty();
                    $("select#week_names").empty();
                    $("select#export_week_name").empty();

                    for(let week of weeks) {
                        let week_row = $(`<tr class="text-center divide-x divide-gray-200"></tr>`);

                        let id = $(`<td class="text-gray-500 py-4 px-2">${week.week_id}</td>`);
                        let name = $(`<td class="text-gray-500 py-4 px-2">${week.name}</td>`);

                        $("select#week_title").append(`<option name="${week.name}">${week.name}</option>`);
                        $("select#week_names").append(`<option name="${week.name}">${week.name}</option>`);
                        $("select#export_week_name").append(`<option name="${week.name}">${week.name}</option>`);

                        let virtual = $(`<td class="text-gray-500 py-4 px-2">${week.virtual_available ? "Yes" : "No"}</td>`);
                        let in_person = $(`<td class="text-gray-500 py-4 px-2">${week.inclass_available ? "Yes" : "No"}</td>`);
                        let delete_button = `<td class="py-6 text-center mx-auto">
                        <button class="outline-none text-red-400 cursor-pointer hover:text-red-600 transition duration-200" onclick="delete_week(${week.week_id})">Delete Week</button>
                        </td>`;

                        week_row.append([
                            id,
                            name,
                            virtual,
                            in_person,
                            delete_button
                        ]);

                        $("#week-data").append(week_row);
                    }
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        });

        $("#select-questions").on("submit", event => {
            event.preventDefault();
            $("#question-data").empty();

            fetch(`/admin/get-questions/`, {
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password
                })
            })
                .then(response => response.json())
                .then(questions => {
                    for(let question of questions) {
                        let question_row = $(`<tr class="text-center divide-x divide-gray-200"></tr>`);

                        let q_id = $(`<td class="text-gray-500 py-4 px-2">${question.id}</td>`);
                        let q = $(`<td class="text-gray-500 py-4 px-2">${question.question}</td>`);
                        let week = $(`<td class="text-gray-500 py-4 px-2">${question.week}</td>`);
                        let responses = $(`<td class="text-gray-500 py-4 px-2"></td>`);
                        let delete_action = `<td class="py-6 text-center mx-auto">
                            <button class="outline-none text-red-400 cursor-pointer hover:text-red-600 transition duration-200" onclick="delete_question(${question.id}, '${question.week}');">Delete Question</button>
                            </td>`;

                        for(let response of question.responses) {
                            let r_container = $("<div></div>");

                            let res = $(`<p>${response.response} <button class="mb-2 text-red-400 cursor-pointer hover:text-red-600 transition duration-200" onclick="delete_response(${question.id}, ${response.id});">Delete Response</button></p>`);

                            r_container.append([ res ]);
                            responses.append(r_container);
                        }

                        question_row.append([
                            q_id,
                            week,
                            q,
                            responses,
                            delete_action
                        ]);

                        $("#question-data").append(question_row);
                    }
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        });

        $("#new-question").on("submit", event => {
            event.preventDefault();
            
            let week = $("#week_title").val();
            let question = $("#question").val();

            fetch("/admin/add-question", {
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password,
                    week,
                    question
                })
            })
                .then(() => {
                    alert("Successfully created question.");
                    reload();
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        });

        $("#send-mail").on("submit", event => {
            event.preventDefault();

            let weeks = $("#week_names").val();
            let prospects = $("#prospects").val();
            let applicants = $("#applicants").val();
            let registered = $("#registered").val();
            let subject = $("#subject").val();
            let message = $("#message").val();

            fetch("/admin/send-mail", {
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password,
                    weeks,
                    prospects,
                    applicants,
                    registered,
                    subject,
                    message
                })
            })
                .then(() => {
                    alert("Successfully sent emails.");
                    reload();
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        });

        $("#export-by-week").on("submit", event => {
            event.preventDefault();

            let week_name = $("#export_week_name").val();

            fetch("/admin/export/week", {
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password,
                    week_name
                })
            })
                .then(response => response.text())
                .then(data => {
                    alert("Successfully exported week to CSV. Dismiss to download.");
                    window.location.href = `data:text/csv;charset=utf-8,${encodeURI(data)}`;;
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        });

        $("#export-all").on("submit", event => {
            event.preventDefault();

            fetch(`/admin/export/all/`, {
                method: "POST",
                cache: "no-cache",
                headers: { "Content-Type": "application/json" },
                redirect: "manual",
                body: JSON.stringify({
                    code: password
                })
            })
                .then(response => response.text())
                .then(data => {
                    alert("Successfully exported campers to CSV. Dismiss to download.");
                    window.location.href = `data:text/csv;charset=utf-8,${encodeURI(data)}`;;
                })
                .catch(err => {
                    alert("An error has occurred. Try checking the client-side logs first. If there's nothing, the server is broken.");
                    console.error(err);
                });
        });
    </script>
</body>